# This is a basic workflow to help you get started with Actions

name: dotnet-nuget

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  dotnetpack_nugetpush_job:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      projectpath: ./dotnet-nuget.csproj
      buildconfiguration: release
      outputpath: mypkgout
      runid: ${{github.run_id}}
      githubtoken: ${{ secrets.GITHUB_TOKEN }}
      githubnugetpackageregistry: https://nuget.pkg.github.com/cttan68/index.json
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v1.7.2
        with:
          dotnet-version: '5.0.201'
      - name: Restore with dotnet
        run: dotnet restore ${projectpath}
      - name: Build with dotnet
        run: dotnet build ${projectpath} --configuration ${build configuration} --version-suffix ${runid} --no-restore
      - name: Pack as nuget with dotnet
        run: dotnet pack ${projectpath} --configuration ${buildconfiguration} --output ${outputpath} --version-suffix ${runid} --no-build --no-restore
      - name: Publish Nuget to GitHub registry
        run: dotnet nuget push ${outputpath}/*.nupkg --api-key ${githubtoken} --source ${githubnugetpackageregistry}   --skip- duplicate --no-symbols true
